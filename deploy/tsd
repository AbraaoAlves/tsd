#!/usr/bin/env node
var tsd = require('./source');

var isMain = (module) && require.main === (module);

if (isMain) {
    new tsd.Main().run(Array.prototype.slice.call(process.argv));
} else {
    var eventManager = new tsd.EventManager();
    var logProxy = {
        logger: {
            log: function (msg) {
                eventManager.dispatchEvent('log', msg);
            }
        }
    };

    var logger = new tsd.ApiLogger(logProxy);

    tsd.System.Console.initialize(logger);

    function load(config, callback) {
        exports.commands.config = new tsd.Config();
        exports.commands.config.load(config);
        callback(exports);
    }

    function install(libs, callback) {
    	var evManager = new tsd.EventManager();
        var command = new tsd.Command.InstallCommand(this.config);
        var args = ['*', 'api', 'install'];
        var cache = {};

        if(typeof callback !== 'function') {
        	if(callback == "*") {
	        	args[2] = 'install*';
	        	callback = arguments[2];
	        }
        }

        for(var i = 0; i < libs.length; i++) {
            if(!cache[libs[i]]) {
                cache[libs[i]] = true;
                args.push(libs[i]);
            }
        }

        function wrappCallback(err, data){
        	if(err) {
        		evManager.dispatchEvent('error', err);
        	} else {
        		evManager.dispatchEvent('end', data);
        	}

        	if(callback)
        		callback.apply(this, [err, data]);
        }

        command.exec(args, wrappCallback);

        return {
			on: function(ev, callback) {
		        evManager.addListener(ev, callback);
		        return this;
	    	}
        };
    }

    function all(callback) {
    	var evManager = new tsd.EventManager();
    	var command = new tsd.Command.AllCommand(this.config);
        var args = ['*', 'api', 'all'];
        command.exec(args, callback);

        function wrappCallback(err, data){
        	if(err) {
        		evManager.dispatchEvent('error', err);
        	} else {
        		evManager.dispatchEvent('end', data);
        	}

        	if(callback)
        		callback.apply(this, [err, data]);
        }

        command.exec(args, wrappCallback);

        return {
			on: function(ev, callback) {
		        evManager.addListener(ev, callback);
		        return this;
	    	}
        };
    }

    exports.load = load;

    exports.commands = {
        install: install,
        all: all
    };

    exports.on = function (ev, callback) {
        eventManager.addListener(ev, callback);
    };
}
